{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","allPages","Math","floor","items","className","classNames","disabled","href","onClick","map","number","active","item","App","useState","page","setPage","activePage","setActivePage","lastPage","start","end","id","onChange","e","currentTarget","value","htmlFor","pageNumber","ReactDOM","render","document","getElementById"],"mappings":"2MAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEIC,EAAWC,KAAKC,MAAMN,EAAQC,EAAU,GAExCD,EAAQC,IAAY,IACtBG,EAAWJ,EAAQC,GAGrB,IAAML,EAAUH,EAAW,EAAGW,GAC1BG,EAAQd,EAAW,EAAGQ,GAEN,IAAhBC,GAAqBA,IAAgBE,IAIvCG,EAAQd,EAHOQ,GAAWC,EAAc,GAAK,EACjCA,EAAcD,IAKxBC,IAAgBE,GAA4B,IAAhBF,IAI9BK,EAAQd,GAHOW,EAAW,GAAKH,EAAU,EAC7BD,IAqBd,OACE,gCACE,qBAAIQ,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CACEC,SAA0B,IAAhBR,IAHd,SAOE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBT,EACfU,QAAS,WAvBE,IAACf,EACV,KADUA,EAuBgBK,IAlBpCC,EAAaN,EAAI,IAaX,oBAUDD,EAAQiB,KAAI,SAAAC,GAAM,OACjB,oBACEN,UAAWC,IACT,YACA,CACEM,OAAQb,IAAgBY,IAJ9B,SASE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMT,EAAaW,IAJ9B,SAMGA,KAREA,MAYT,oBAAIN,UAAWC,IACb,YACA,CACEC,SAAUR,IAAgBE,IAH9B,SAOE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeT,IAAgBE,EAC/BQ,QAAS,WApEF,IAACf,KAoEgBK,KAnEtBE,GAIVD,EAAaN,EAAI,IA0DX,uBAWJ,6BACGU,EAAMM,KAAI,SAAAG,GAAI,OACb,oBAAI,UAAQ,OAAZ,wBAAuCA,IAAfA,YC/GrBC,EAAgB,WAC3B,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAWIC,EAAWlB,KAAKC,MAAM,GAAKa,EAAO,GAElCK,EAAQ,EACRC,EAAMN,EAgBV,OAlBc,GAIFA,IAAS,IACnBI,EALY,GAKOJ,GAGF,IAAfE,GAAoBA,IAAeE,IACrCC,EAAQL,GAAQE,EAAa,GAAK,EAClCI,EAAMJ,EAAaF,GAGjBE,IAAeE,GAA2B,IAAfF,IAC7BG,GAASD,EAAW,GAAKJ,EAAO,EAChCM,EAfY,IAmBZ,sBAAKjB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWa,EADX,mBACgCG,EADhC,cAC2CC,EAD3C,eAtBU,GAsBV,OAIA,sBAAKjB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRkB,GAAG,kBACHlB,UAAU,eACVmB,SA1CS,SAACC,GAClBR,GAASQ,EAAEC,cAAcC,OACzBR,EAAc,IAyCNQ,MAAOX,EALT,UAOE,wBAAQW,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOC,QAAQ,kBAAkBvB,UAAU,qBAA3C,4BAIA,cAAC,EAAD,CACER,MA/CM,GAgDNC,QAASkB,EACTjB,YAAamB,EACblB,aAvDW,SAAC6B,GAClBV,EAAcU,aCXlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.194a7b68.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (pageNumber: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  let allPages = Math.floor(total / perPage + 1);\n\n  if (total % perPage === 0) {\n    allPages = total / perPage;\n  }\n\n  const numbers = getNumbers(1, allPages);\n  let items = getNumbers(1, perPage);\n\n  if (currentPage !== 1 && currentPage !== allPages) {\n    const start = (perPage * (currentPage - 1) + 1);\n    const end = currentPage * perPage;\n\n    items = getNumbers(start, end);\n  }\n\n  if (currentPage === allPages && currentPage !== 1) {\n    const start = (allPages - 1) * perPage + 1;\n    const end = total;\n\n    items = getNumbers(start, end);\n  }\n\n  const nextPage = (n: number) => {\n    if (n === allPages) {\n      return;\n    }\n\n    onPageChange(n + 1);\n  };\n\n  const previousPage = (n: number) => {\n    if (n === 1) {\n      return;\n    }\n\n    onPageChange(n - 1);\n  };\n\n  return (\n    <div>\n      <ul className=\"pagination\">\n        <li className={classNames(\n          'page-item',\n          {\n            disabled: currentPage === 1,\n          },\n        )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={() => previousPage(currentPage)}\n          >\n            «\n          </a>\n        </li>\n        {numbers.map(number => (\n          <li\n            className={classNames(\n              'page-item',\n              {\n                active: currentPage === number,\n              },\n            )}\n            key={number}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${number}`}\n              onClick={() => onPageChange(number)}\n            >\n              {number}\n            </a>\n          </li>\n        ))}\n        <li className={classNames(\n          'page-item',\n          {\n            disabled: currentPage === allPages,\n          },\n        )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === allPages}\n            onClick={() => nextPage(currentPage)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {items.map(item => (\n          <li data-cy=\"item\" key={item}>{`Item ${item}`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\n\nexport const App: React.FC = () => {\n  const [page, setPage] = useState(5);\n  const [activePage, setActivePage] = useState(1);\n\n  const setPerPage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPage(+e.currentTarget.value);\n    setActivePage(1);\n  };\n\n  const changePage = (pageNumber: number) => {\n    setActivePage(pageNumber);\n  };\n\n  let lastPage = Math.floor(42 / page + 1);\n  const total = 42;\n  let start = 1;\n  let end = page;\n\n  if (total % page === 0) {\n    lastPage = total / page;\n  }\n\n  if (activePage !== 1 && activePage !== lastPage) {\n    start = page * (activePage - 1) + 1;\n    end = activePage * page;\n  }\n\n  if (activePage === lastPage && activePage !== 1) {\n    start = (lastPage - 1) * page + 1;\n    end = total;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${activePage} (items ${start} - ${end} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={setPerPage}\n            value={page}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n\n        <Pagination\n          total={total}\n          perPage={page}\n          currentPage={activePage}\n          onPageChange={changePage}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}